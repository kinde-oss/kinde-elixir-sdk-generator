openapi: 3.0.0
info:
  version: '1'
  title: Kinde Management API
  description: Provides endpoints to manage your Kinde Businesses
  termsOfService: https://kinde.com/docs/important-information/terms-of-service
  contact:
    name: Kinde Support Team
    email: support@kinde.com
    url: https://kinde.com/docs
servers:
  - url: https://{businessName}.kinde.com/
    variables:
      businessName:
        default: app
        description: Business Name created in the Kinde Console
security:
  - kindeBearerAuth: []
tags:
  - name: Users
    description: Everything about your end-users
paths:
  /oauth2/user_profile:
    get:
      tags:
        - OAuth
      operationId: getUser
      description: |
        Contains the id, names and email of the currently logged in user
      summary: Returns the details of the currently logged in user
      responses:
        '200':
          description: Details of logged in user V1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_profile'
        '403':
          description: Invalid credentials.
  /oauth2/v2/user_profile:
    get:
      tags:
        - OAuth
      operationId: getUserProfileV2
      description: |
        Contains the id, names and email of the currently logged in user
      summary: Returns the details of the currently logged in user
      responses:
        '200':
          description: Details of logged in user V2
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_profile_v2'
        '403':
          description: Invalid credentials.
  /api/v1/users:
    get:
      tags:
        - Users
      operationId: getUsers
      description: |
        The returned list can be sorted by full name or email address
        in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query
        string parameter.
      summary: List Users
      parameters:
        - name: sort
          in: query
          description: Field and order to sort the result by.
          schema:
            type: string
            nullable: true
            enum: [name_asc, name_desc, email_asc, email_desc]
        - name: page_size
          in: query
          description: Number of results per page. Defaults to 10 if parameter not sent.
          schema:
            type: integer
            nullable: true
        - name: user_id
          in: query
          description: ID of the user to filter by.
          schema:
            type: integer
            nullable: true
        - name: next_token
          in: query
          description: A string to get the next page of results if there are more results.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Users successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '403':
          description: Invalid credentials.
  /api/v1/user:
    get:
      tags:
        - Users
      operationId: getUser
      description: |
        Retrieve a user record
      summary: Get User
      parameters:
        - name: id
          in: query
          description: The user's id.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Id is not provided.
        '403':
          description: Invalid credentials.
        '404':
          description: User not found.
    post:
      tags:
        - Users
      operationId: createUser
      description: |
        Creates a user record and optionally zero or more identities for the user. An example identity could be the email
        address of the user.
      summary: Create User
      requestBody:
        description: The details of the user to create.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  description: Basic information required to create a user
                  type: object
                  properties:
                    given_name:
                      type: string
                      description: User's first name
                    family_name:
                      type: string
                      description: User's last name
                identities:
                  type: array
                  description: Array of identities to assign to the created user
                  items:
                    type: object
                    description: The result of the user creation operation
                    properties:
                      'type':
                        type: string
                        description: The type of identity to create, for e.g. email
                      details:
                        type: object
                        description: Additional details required to create the user
                        properties:
                          email:
                            type: string
                            description: The email address of the user
      responses:
        '200':
          description: User successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique id of the user in Kinde
                    type: string
                  created:
                    description: True if the user was successfully created
                    type: boolean
                  identities:
                    type: array
                    items:
                      $ref: '#/components/schemas/user_identity'
        '403':
          description: Invalid credentials.
    patch:
      tags:
        - Users
      operationId: updateUser
      description: |
        Update a user record
      summary: Update User
      parameters:
        - name: id
          in: query
          description: The user's id.
          schema:
            type: string
            nullable: false
      requestBody:
        description: The user to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                given_name:
                  type: string
                  description: User's first name
                family_name:
                  type: string
                  description: User's last name
      responses:
        '200':
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Id is not provided.
        '403':
          description: Invalid credentials.
        '404':
          description: User not found.
    delete:
      tags:
        - Users
      operationId: deleteuser
      description: |
        Delete a user record
      summary: Delete User
      parameters:
        - name: id
          in: query
          description: The user's id.
          schema:
            type: string
            nullable: false
      responses:
        '204':
          description: User successfully deleted.
        '400':
          description: Id is not provided.
        '403':
          description: Invalid credentials.
        '404':
          description: User not found.
  /api/v1/organization:
    get:
      tags:
        - Organizations
      operationId: getOrganization
      description: |
        Gets an organization given the organization's code.
      summary: Get Organization
      parameters:
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: Organization successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
        '400':
          description: Invalid request query string. Code is not provided.
        '403':
          description: Invalid credentials.
        '404':
          description: Organization not found.
    post:
      tags:
        - Organizations
      operationId: createOrganization
      description: Create an organization.
      summary: Create Organization
      requestBody:
        description: Organization details.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The organization's name.
                  type: string
      responses:
        '201':
          description: Organization successfully created.
        '403':
          description: Invalid credentials.
        '404':
          description: Invalid request body. Name is not provided.
        '500':
          description: Could not create organization.
  /api/v1/organizations:
    get:
      tags:
        - Organizations
      operationId: getOrgainzations
      description: |
        Get a list of organizations.
      summary: List Organizations
      parameters:
        - name: sort
          in: query
          description: Field and order to sort the result by.
          schema:
            type: string
            nullable: true
            enum: [name_asc, name_desc, email_asc, email_desc]
        - name: page_size
          in: query
          description: Number of results per page. Defaults to 10 if parameter not sent.
          schema:
            type: integer
            nullable: true
        - name: next_token
          in: query
          description: A string to get the next page of results if there are more results.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: A succesful response with a list of organizations or an empty list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizations'
        '403':
          description: Invalid credentials.
  /api/v1/organization/users:
    get:
      tags:
        - Organizations
        - Users
      operationId: GetOrganizationUsers
      description: Get users in an organizaiton.
      summary: List Organization Users
      parameters:
        - name: sort
          in: query
          description: Field and order to sort the result by.
          schema:
            type: string
            nullable: true
            enum: [name_asc, name_desc, email_asc, email_desc]
        - name: page_size
          in: query
          description: Number of results per page. Defaults to 10 if parameter not sent.
          schema:
            type: integer
            nullable: true
        - name: next_token
          in: query
          description: A string to get the next page of results if there are more results.
          schema:
            type: string
            nullable: true
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: A succesful response with a list of organization users or an empty list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization_user'
        '403':
          description: Invalid credentials.
    post:
      tags:
        - Organizations
        - Users
      operationId: AddOrganizationUsers
      description: Add existing users to an organization.
      summary: Assign Users to an Organization
      parameters:
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: List of user ids to be added to the organization.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Users successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users_add:
                    type: array
                    items:
                      type: string
        '204':
          description: No users added.
        '400':
          description: Invalid request query string. Code is not provided.
        '403':
          description: Invalid credentials.
        '404':
          description: No organization with that code.
    patch:
      tags:
        - Organizations
        - Users
      operationId: RemoveOrganizationUsers
      description: Remove existing users from an organization.
      summary: Remove Users from an Organization
      parameters:
        - name: code
          in: query
          description: The organization's code.
          schema:
            type: string
            nullable: false
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: List of user ids to be removed from the organization.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Users successfully removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users_added:
                    type: array
                    items:
                      type: string
        '204':
          description: No users removed.
        '400':
          description: Invalid request query string. Code is not provided.
        '403':
          description: Invalid credentials.
        '404':
          description: No organization with that code.
components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
          description: Unique id of the user in Kinde
        email:
          type: string
          description: Default email address of the user in Kinde
        last_name:
          type: string
          description: User's last name
        first_name:
          type: string
          description: User's first name
        is_suspended:
          type: boolean
          description: Whether the user is currently suspended or not
    users:
      type: array
      items:
        $ref: '#/components/schemas/user'
    user_identity:
      type: object
      properties:
        'type':
          type: string
          description: The type of identity object created
        result:
          type: object
          description: The result of the user creation operation
          properties:
            created:
              type: boolean
              description: True if the user identity was successfully created
            identity_id:
              type: integer
              description: Unique id of the user's identity in Kinde
    user_profile:
      type: object
      properties:
        id:
          type: string
          description: Unique id of the user in Kinde
        preferred_email:
          type: string
          description: Default email address of the user in Kinde
        provided_id:
          type: string
          description: Value of the user's id in a third-party system when the user is imported into Kinde
        last_name:
          type: string
          description: User's last name
        first_name:
          type: string
          description: User's first name
    user_profile_v2:
      type: object
      properties:
        id:
          type: string
          description: Unique id of the user in Kinde
        provided_id:
          type: string
          description: Value of the user's id in a third-party system when the user is imported into Kinde
        name:
          type: string
          description: Users's first and last name separated by a space
        given_name:
          type: string
          description: User's first name
        family_name:
          type: string
          description: User's last name
        updated_at:
          type: string
          description: Date the user was last updated at
    organization:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        is_default:
          type: boolean
    organizations:
      type: array
      items:
        $ref: '#/components/schemas/organization'
    organization_user:
      type: object
      properties:
        user_id:
          type: integer
        email:
          type: string
        full_name:
          type: string
        last_name:
          type: string
        first_name:
          type: string
    organization_users:
      type: array
      items:
        $ref: '#/components/schemas/organization_user'
  securitySchemes:
    kindeBearerAuth:
      description: |
        Accessing the API requires obtaining an access token when login in through Kinde. However, management functions (for e.g. user management) requires an access token
        obtained using the client_credentials flow.
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
